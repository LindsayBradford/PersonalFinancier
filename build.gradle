apply plugin: 'java'
apply plugin: 'application'

defaultTasks 'distribute'

// Start Project configuration

sourceCompatibility = '13'
targetCompatibility = '13'

project.group = 'blacksmyth.personalfinancier'
project.version = '0.5'

project.ext {
  title = 'PersonalFinancier'
  contact = 'Lindsay Willian Bradford (lindsay.w.bradford_at_gmail.com)'
  libsDirectory = 'libs'
  distributionDirectory = 'dist'
}

mainClassName = project.group + '.' + project.title

List testLibs = [
  'junit:junit:4.13.2',
  'org.hamcrest:hamcrest:2.2',
  'org.mockito:mockito-all:1.10.19'
]

List libsToMerge = [
  'commons-codec:commons-codec:1.17.2', 
  'com.jtattoo:JTattoo:1.6.13', 
  'com.cedarsoftware:json-io:4.14.3', 
  'de.erichseifert.gral:gral-core:0.11',
  'org.apache.logging.log4j:log4j-api:2.24.3'
]

List annotatingLibsToMerge = [
  'org.apache.logging.log4j:log4j-core:2.24.3'
]

List libsToShip = [ 
  'org.bouncycastle:bcprov-jdk18on:1.80' 
]

repositories {
   mavenCentral()
}

configurations {
  mergeLibs
  shipLibs
}

dependencies {
  mergeLibs libsToMerge, annotatingLibsToMerge 
  shipLibs libsToShip
  annotationProcessor annotatingLibsToMerge 
  implementation libsToMerge, annotatingLibsToMerge, libsToShip
  testImplementation testLibs
}

jar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  from {
    configurations.mergeLibs.collect { zipTree(it) }
  }

  manifest {
   attributes (
      'Implementation-Title': project.title, 
      'Implementation-Version': project.version,
      'Contact':  project.contact,
      'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
      'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
      'Main-Class' : mainClassName,
      'Class-Path' : configurations.shipLibs.collect{ it.getName() }.join(' '),
    )
  }
  
  doLast {
    file(jar.archivePath).setExecutable(true)
    println "$jar.archiveName created and is executable."
  }
}

task syncLibs(type: Sync) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from configurations.compileClasspath, configurations.testCompileClasspath
  into project.libsDirectory
  doLast {
    println "Synchronised library dependencies into directory ($project.libsDirectory)."
  }
}

task distribute(type: Copy) {
  dependsOn jar,syncLibs 
  from jar 
  from configurations.shipLibs
  into project.distributionDirectory
  doLast {
    println "Distributed $project.title and support libraries to directory ($project.distributionDirectory)."
  }
}


test {
  testLogging {
    events 'passed', 'skipped', 'failed'
  }
}

run {
  dependsOn distribute 
  doLast {
    println "Running $project.title"
  }
}

task full {
  dependsOn clean, distribute 
}

apply plugin: 'java'
apply plugin: 'application'

defaultTasks 'clean', 'dist'

// Start Project configuration

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

project.group = "blacksmyth.personalfinancier"
project.version = "0.2"

project.ext {
  title = "PersonalFinancier"
  contact = "Lindsay Willian Bradford (lindsay.w.bradford_at_gmail.com)"
}

mainClassName = project.group + '.' + project.title

// Storing all dependencies in a libs directory. 

repositories {
   mavenCentral()
   maven {
     url "http://mvn.erichseifert.de/maven2"
   } 
}

List libsToMerge = [ 
  "com.jtattoo:JTattoo:1.6.10", 
  "com.cedarsoftware:json-io:2.5.2", 
  "de.erichseifert.gral:gral-core:0.9" 
]
List libsToShip = [ 
  "org.bouncycastle:bcprov-jdk15on:1.50" 
]

configurations {
  mergeLibs
  shipLibs
}

dependencies {
  mergeLibs libsToMerge 
  shipLibs libsToShip
  compile libsToMerge, libsToShip 
}

// modify the sourceSets to match the layout of my java-only project.

sourceSets {
  main {
    java {
      srcDir 'src'
      exclude '**/*Test.java'
    }
    resources {
      srcDir 'src/blacksmyth/resources'
    }
  }
}

// Sub-par.  How can I set this nicely from within sourceSets?
// the sourceset command above is parsed, but doesn't seem to have
// effect at processResources task execution time.

processResources {
  destinationDir = file('build/classes/main/blacksmyth/resources')
}

jar {
  // Merge libraries we're dependent on into the executable jar.

  from {
    configurations.mergeLibs.collect { zipTree(it) }
  }

  manifest {
   attributes (
      'Implementation-Title': project.title, 
      'Implementation-Version': project.version,
      'Contact':  project.contact,
      'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
      'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
      'Main-Class' : mainClassName,
      'Class-Path' : configurations.shipLibs.collect{ it.getName() }.join(' '),
    )
  }
}

task libs(type: Sync) {
  from configurations.compile
  into "libs"
}

task distributeShipLibs(type: Copy) {
  dependsOn libs
  configurations.shipLibs.collect {
    from it
  }
  into 'dist'
}

// upload the finalised artifacts to a single repository being the 
// flat directory 'dist'.

uploadArchives {
  uploadDescriptor = false 
  repositories {
    flatDir(name: 'localRepository', dirs: 'dist')
  }
}

task dist {
  dependsOn distributeShipLibs, uploadArchives
}

run {
  dependsOn dist
}

// the full task is the gradle equivalent of the ant script's 
// full target.

task full {
  dependsOn clean, dist
}
